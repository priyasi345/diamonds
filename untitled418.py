# -*- coding: utf-8 -*-
"""Untitled418.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NC_bsQEvX3s2_8s9pjnDLm5Cu1wZNlAl
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math

df_train=pd.read_csv("/content/train.csv")
df_test=pd.read_csv("/content/test.csv")

df_train.head(10)

df_train.shape

df_train.isnull().sum()

df_train.describe()

## https://plotly.com/python/plotly-express/

sns.countplot(x="Bankruptcies",data=df_train)

sns.pairplot(df_train)

corrmat=df_train.corr()
plt.subplots(figsize=(12, 9))
sns.heatmap(corrmat,square=True)

df_train.corr()

df_train.dropna(inplace=True, subset=["Loan ID","Customer ID","Loan Status","Term","Home Ownership","Purpose","Years in current job"])

df_train.isnull().sum()

df_train.fillna(df_train.mean(), inplace=True)

df_train.isnull().sum()

"""##Create Dummy Variables"""

df_train_1=pd.get_dummies(df_train["Loan Status"],drop_first=True)
df_train_1.head(10)

df_train_2=pd.get_dummies(df_train["Term"],drop_first=True)
df_train_2.head(10)

df_train_3=pd.get_dummies(df_train["Home Ownership"],drop_first=True)
df_train_3.head(10)

df_train_4=pd.get_dummies(df_train["Purpose"],drop_first=True)
df_train_4.head(10)

"""Concatenating all the Datasets!"""

df_train=pd.concat([df_train,df_train_1,df_train_2,df_train_3,df_train_4],axis=1)
df_train.head(10)

df_train.isnull().sum()

df_train.info()

df_train=df_train.drop("Term",axis=1)
df_train=df_train.drop("Loan Status",axis=1)
df_train=df_train.drop("Customer ID",axis=1)
df_train=df_train.drop("Loan ID",axis=1)
df_train=df_train.drop("Purpose",axis=1)
df_train=df_train.drop("Debt Consolidation",axis=1)
df_train=df_train.drop("Home Ownership",axis=1)
df_train=df_train.drop("Years in current job",axis=1)

df_train.describe()

X=df_train.drop("Bankruptcies",axis=1)
y=df_train["Bankruptcies"]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2, random_state=1)

from sklearn.linear_model import LogisticRegression

logmodel=LogisticRegression()

"""Label Encoder for y_train dataset"""

from sklearn import preprocessing
lab_enc=preprocessing.LabelEncoder()
y_train=lab_enc.fit_transform(y_train)

logmodel.fit(X_train, y_train)

predictions=logmodel.predict(X_test)

from sklearn.metrics import classification_report

from sklearn import preprocessing
lab_enc=preprocessing.LabelEncoder()
y_test=lab_enc.fit_transform(y_test)

classification_report(y_test, predictions)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, predictions)

from sklearn.metrics import accuracy_score
lr_accuracy=accuracy_score(y_test,predictions)
print(accuracy_score(y_test, predictions))

"""Decision Tree for Classification"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test=train_test_split(X, y, random_state=1)

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier()

"""Label Encoder for y_train dataset"""

from sklearn import preprocessing
lab_enc=preprocessing.LabelEncoder()
y_train=lab_enc.fit_transform(y_train)

dt.fit(X_train, y_train)

y_pred=dt.predict(X_test)

from sklearn import preprocessing
lab_enc=preprocessing.LabelEncoder()
y_test=lab_enc.fit_transform(y_test)

classification_report(y_test, y_pred)

confusion_matrix(y_test, y_pred)

dt_accuracy=accuracy_score(y_test,y_pred)
print(accuracy_score(y_test, y_pred))

"""Random Forest Classification"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2, random_state=0)

"""Feature Scaling"""

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

"""Label Encoder for y_train and y_test dataset"""

from sklearn import preprocessing
lab_enc=preprocessing.LabelEncoder()
y_train=lab_enc.fit_transform(y_train)

from sklearn import preprocessing
lab_enc=preprocessing.LabelEncoder()
y_test=lab_enc.fit_transform(y_test)

"""Training the Algorithm"""

from sklearn.ensemble import RandomForestClassifier

classifier=RandomForestClassifier(n_estimators=100, random_state=0)
classifier.fit(X_train, y_train)
y_pred=classifier.predict(X_test)

print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
rf_accuracy=accuracy_score(y_test,y_pred)
print(accuracy_score(y_test, y_pred))

"""PCA Analysis"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler 
sc = StandardScaler() 
  
X_train = sc.fit_transform(X_train) 
X_test = sc.transform(X_test)

"""Label Encoder for y_train and y_test dataset"""

from sklearn import preprocessing
lab_enc=preprocessing.LabelEncoder()
y_train=lab_enc.fit_transform(y_train)

from sklearn import preprocessing
lab_enc=preprocessing.LabelEncoder()
y_test=lab_enc.fit_transform(y_test)

from sklearn.decomposition import PCA 
  
pca = PCA(n_components = 2) 
  
X_train = pca.fit_transform(X_train) 
X_test = pca.transform(X_test) 
  
explained_variance = pca.explained_variance_ratio_ 

classifier = LogisticRegression(random_state = 0) 
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
from sklearn.metrics import accuracy_score
pca_accuracy=accuracy_score(y_test,y_pred)
print(accuracy_score(y_test, y_pred))

print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

objects=("Logistic Regression","Decision Tree","Random Forest","PCA Analysis")
y_pos=np.arange(len(objects))
performance=[lr_accuracy, dt_accuracy, rf_accuracy, pca_accuracy]

plt.bar(y_pos, performance, align='center', alpha=0.5)
plt.xticks(y_pos, objects)
plt.ylabel('Accuracy of Different Models')
plt.title('Models Comparison for All Features')


plt.show()